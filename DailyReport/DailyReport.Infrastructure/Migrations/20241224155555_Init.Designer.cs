// <auto-generated />
using System;
using System.Collections.Generic;
using DailyReport.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DailyReport.Infrastructure.Migrations
{
    [DbContext(typeof(ReportDailyDbContext))]
    [Migration("20241224155555_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DailyReport.Domain.Entities.ReportDailyEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastProcessedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoredProcedureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("ReportSchedule", "DailyReport.Domain.Entities.ReportDailyEmail.ReportSchedule#ReportSchedule", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("ActiveEndDate")
                                .HasColumnType("date")
                                .HasColumnName("ActiveEndDate");

                            b1.Property<TimeSpan>("ActiveEndTime")
                                .HasColumnType("time")
                                .HasColumnName("ActiveEndTime");

                            b1.Property<DateOnly>("ActiveStartDate")
                                .HasColumnType("date")
                                .HasColumnName("ActiveStartDate");

                            b1.Property<TimeSpan>("ActiveStartTime")
                                .HasColumnType("time")
                                .HasColumnName("ActiveStartTime");

                            b1.Property<int>("FreqInterval")
                                .HasColumnType("int")
                                .HasColumnName("FreqInterval");

                            b1.Property<int>("FreqRecurrenceFactor")
                                .HasColumnType("int")
                                .HasColumnName("FreqRecurrenceFactor");

                            b1.Property<int>("FreqSubdayInterval")
                                .HasColumnType("int")
                                .HasColumnName("FreqSubdayInterval");

                            b1.Property<int>("FreqSubdayType")
                                .HasColumnType("int")
                                .HasColumnName("FreqSubdayType");

                            b1.Property<int>("FreqType")
                                .HasColumnType("int")
                                .HasColumnName("FreqType");
                        });

                    b.HasKey("Id");

                    b.ToTable("ReportDailyEmail", (string)null);
                });

            modelBuilder.Entity("DailyReport.Domain.Entities.ReportDailyMonitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportDailyEmailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReportDailyEmailId");

                    b.ToTable("ReportDailyMonitor", (string)null);
                });

            modelBuilder.Entity("DailyReport.Domain.Entities.ReportDailyEmail", b =>
                {
                    b.OwnsOne("DailyReport.Domain.Entities.EmailContent", "EmailContent", b1 =>
                        {
                            b1.Property<int>("ReportDailyEmailId")
                                .HasColumnType("int");

                            b1.Property<string>("AttachmentName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AttachmentName");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Body");

                            b1.Property<string>("Subject")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Subject");

                            b1.HasKey("ReportDailyEmailId");

                            b1.ToTable("ReportDailyEmail");

                            b1.WithOwner()
                                .HasForeignKey("ReportDailyEmailId");
                        });

                    b.Navigation("EmailContent")
                        .IsRequired();
                });

            modelBuilder.Entity("DailyReport.Domain.Entities.ReportDailyMonitor", b =>
                {
                    b.HasOne("DailyReport.Domain.Entities.ReportDailyEmail", "ReportDailyEmail")
                        .WithMany("ReportDailyMonitors")
                        .HasForeignKey("ReportDailyEmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportDailyEmail");
                });

            modelBuilder.Entity("DailyReport.Domain.Entities.ReportDailyEmail", b =>
                {
                    b.Navigation("ReportDailyMonitors");
                });
#pragma warning restore 612, 618
        }
    }
}
